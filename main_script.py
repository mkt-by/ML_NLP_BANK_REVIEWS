
"""
streamlit run /tmp/test.py --server.port 80
"""

import streamlit as st
from streamlit_option_menu import option_menu
import streamlit.components.v1 as components


import pandas as pd
import matplotlib.pyplot as plt
import matplotlib as mpl
import numpy as np
import plotly.express as px
import seaborn as sns
import os
import traceback
import glob


import joblib

def sent(x):
    if x <=2:
        return '–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ'
    elif x >3:
        return '–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ'
    return '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ'

@st.cache_data
def dowload_df():
    df = pd.read_excel('MyFin Revuews.xlsx')
    df['sent'] = df['count_stars'].apply(lambda x: sent(x))
    return df

def calculate_nps(x):
    return round(((x['stars_4']+x['stars_5']) - (x['stars_1']+x['stars_2']))/x['all_review']*100)

def revue_nsp(df):
    t = df.groupby(['bank_name','count_stars'])['id'].count().reset_index()
    df_stars = t.pivot_table(index='bank_name', columns='count_stars', values='id').reset_index()
    df_stars = df_stars.fillna(0)
    df_stars = df_stars.rename(columns = {1:'stars_1',2:'stars_2',3:'stars_3',4:'stars_4',5:'stars_5'})
    df_stars['all_review'] = df_stars.apply(lambda x: x['stars_4']+x['stars_5']+x['stars_1']+x['stars_2'],axis=1)
    df_stars['NPS'] = df_stars.apply(lambda x: calculate_nps(x),axis=1)
    return df_stars

st.set_page_config(
        page_title="ML NLP",
        # page_icon="chart_with_upwards_trend",
        page_icon="ü¶à",
        layout="wide",
    )

st.markdown("""<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous"> """,unsafe_allow_html=True)

# –∑–∞–≥—Ä—É–∑–∫–∞ DataSet 
df = dowload_df()
bank_list = np.sort(df['bank_name'].unique())
# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ç–æ—Ä–∞
model_SVC = joblib.load('model_SVC.pkl')
tf_idf_vectorizer_n2 = joblib.load('tf_idf_vectorizer.pkl')

with open('style.css', mode='r', encoding='utf') as fl:
    style_css = fl.read()
st.markdown(style_css, unsafe_allow_html=True)
st.markdown(f'<p class="caption-font">ML NLP</p>', unsafe_allow_html=True)



with st.sidebar:
    selected = option_menu(
        "–ú–µ–Ω—é", 
        ["–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤", '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏',], 
        icons=['house', 'file-earmark-person','currency-dollar',''], 
        menu_icon="menu-up",
         styles={
            "nav-link": {"font-size": "13px"},
        }, 
        default_index=0
    )


if selected == '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –æ—Ç–∑—ã–≤–æ–≤':
    st.markdown(f'<p class="alert alert-primary">{selected}</p>', unsafe_allow_html=True)
    st.markdown(f'<p class="text-uppercase display-6">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ –±–∞–Ω–∫–∞–º</p>', unsafe_allow_html=True)
    st.divider()
    df_revue_destrib = df.groupby('bank_name').size().sort_values(ascending=False).reset_index(name='reviews')
    st.bar_chart(df_revue_destrib,x='bank_name',y='reviews',x_label ='–ë–∞–Ω–∫–∏',y_label ='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤')
    st.divider()
    st.markdown(f'<p class="text-uppercase display-6">–†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è NPS –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–∑—ã–≤–æ–≤</p>', unsafe_allow_html=True)
    df_stars = revue_nsp(df)
    st.bar_chart(df_stars,x='bank_name',y='NPS',x_label ='–ë–∞–Ω–∫–∏',y_label ='NPS',color='#ff9f9b')
    st.divider()
    st.markdown(f'<p class="text-uppercase display-6">–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ –ø–æ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏</p>', unsafe_allow_html=True)
    bank_option = st.selectbox("",(bank_list),)
    df_count_stars = df[df['bank_name']==bank_option].groupby('sent').size().reset_index(name='cnt')
    df_count_stars['perc'] = df_count_stars['cnt'].apply(lambda x: round(x/df_count_stars['cnt'].sum()*100,2))
    fig = px.pie(df_count_stars, values='perc', names='sent',color='sent',color_discrete_map={'–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–µ':'#ef553b','–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ':'#636efa','–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ':'#00cc96'})
    st.plotly_chart(fig, use_container_width=True)


if selected == '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏':
    st.markdown(f'<p class="alert alert-primary">{selected}</p>', unsafe_allow_html=True)
    st.markdown(f'<p ">–î–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É</p>', unsafe_allow_html=True)
    text_review = st.text_input("")
    if st.button("–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", type="secondary"):
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –≤–µ–∫—Ç–æ—Ä
        review_vector = tf_idf_vectorizer_n2.transform([text_review])
        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        prediction = model_SVC.predict(review_vector)
        probs = model_SVC.predict_proba(review_vector)
        if prediction[0] == 1:
            st.markdown(f'<p class="text-success">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π</p>', unsafe_allow_html=True)
        elif prediction[0] == 0:
            st.markdown(f'<p class="text-danger">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π</p>', unsafe_allow_html=True)
        st.write(f"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 0 (–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π) - {probs[:, 0][0]:.20f}")
        st.write(f"–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∞ 1 (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π) - {probs[:, 1][0]:.20f}")